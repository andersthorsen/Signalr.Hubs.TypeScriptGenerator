@using System
@using System.Linq;
@using GeniusSports.Signalr.Hubs.TypeScriptGenerator.Models
@model GeniusSports.Signalr.Hubs.TypeScriptGenerator.Models.TypesModel

/// Autogenerated at @Model.LastGenerated by https://github.com/geniussportsgroup/Signalr.Hubs.TypeScriptGenerator
@if (@Model.IncludeReferencePaths)
{
	@Raw("/// <reference path=\"../signalr/index.d.ts\" />" + Environment.NewLine);
	@Raw("/// <reference path=\"../ jquery / index.d.ts\" />" + Environment.NewLine);
}

// Hubs

interface SignalR
{
	@foreach (MemberTypeInfo type in Model.Hubs)
	{
	<text>@(type.Name) : @(type.TypeScriptType);</text>
	}
}

// Service contracts
@foreach(var grouping in Model.ServiceContracts.GroupBy(x => x.ModuleName))
{
<text>
declare module @grouping.Key
{
	@foreach (var serviceInfo in grouping){
	<text>interface @serviceInfo.InterfaceName
	{
		server : @(serviceInfo.ServerFullType);
		@if (serviceInfo.ClientType == "any")
		{
			@Raw("\t\t// TODO: Hub does not have a Client Interface as a generic argument - it is recommended to add one." + Environment.NewLine);
		}
		client : @Raw(serviceInfo.ClientType);
	}

	interface @serviceInfo.ServerType
	{
		@foreach (FunctionDetails functionDetails in serviceInfo.ServerFunctions)
		{
		<text>@Raw(functionDetails.Name + functionDetails.Arguments) : @Raw(functionDetails.ReturnType);</text>
		}
	}</text>
	}
}
</text>
}
// Clients
@foreach (var grouping in Model.Clients.GroupBy(x => x.ModuleName))
{
<text>
declare module @grouping.Key
{
	@foreach (var clientInfo in grouping){
	<text>interface @clientInfo.InterfaceName
	{
		@foreach (FunctionDetails functionDetails in clientInfo.FunctionDetails)
		{
		<text>@Raw(functionDetails.Name) : @Raw(functionDetails.Arguments) => void;</text>
		}
	}</text>
	}
}
</text>
}
// Data contracts
@foreach (var grouping in Model.DataContracts.GroupBy(x => x.ModuleName))
{
<text>
declare module @grouping.Key
{
	@foreach (var dataContractInfo in grouping)
	{
	<text>interface @dataContractInfo.InterfaceName @dataContractInfo.ExtendsDeclaration
	{
		@foreach (MemberTypeInfo property in dataContractInfo.Properties)
		{
		<text>@Raw(property.DeclaredName) : @Raw(property.TypeScriptType);</text>
		}
	}</text>
	}        
}
</text>
}

// Enums
@foreach (EnumInfo enumInfo in Model.Enums){
<text>
declare module @enumInfo.ModuleName
{
	export enum @enumInfo.InterfaceName
	{
		@foreach (MemberTypeInfo property in enumInfo.Properties)
		{
		<text>@Raw(property.Name) = @Raw(property.TypeScriptType),</text>
		}
	}
}
</text>
}